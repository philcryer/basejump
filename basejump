#!/usr/bin/env bash

#=============================================================================
# basejump --- a script that uses Ansible to automate the setup of new hosts
#       with applications, dotfiles, configs, and handly-dandy one-liners on
#       Linux and macOS systems.
# Copyright: (c) 2019 philcryer
# Author: philcryer < phil at philcryer dot com >
# URL:  https://github.com/philcryer/basejump
# License: MIT
#=============================================================================

set -e

distro=$(uname)

function msg_status () {
    echo -e "\x1B[01;34m[*]\x1B[0m $1" 
}
function msg_good () { 
    echo -e "\x1B[01;32m[*]\x1B[0m $1" 
}
function msg_error () { 
    echo -e "\x1B[01;31m[*]\x1B[0m $1" 
}
function msg_notification () { 
    echo -e "\x1B[01;33m[*]\x1B[0m $1"
}

kick-off(){
    clear
    echo -e "\x1B[01;31m"
    echo "     |            |    |             |               |"
    echo "  |        |              |        |             |"
    cat src/logo-ascii.txt
    msg_status "ohai, let's basejump!"
    sudo -v
}

os-check(){
    msg_notification "checking operating system"
        if [ "$distro" == "Linux" ]; then
            msg_good "$distro is supported, continuing"
        elif [ "$distro" == "MacOS" ]; then
            msg_good "$distro is supported, continuing"
        fi
}

software-check(){
    msg_notification "checking for required software"
    for cli in python3 curl git sudo; do
        if ! type "$cli" > /dev/null 2>&1; then
            msg_error "$cli is not installed - install that and try again"; exit 1
        fi
    done
    msg_good "all required software installed"
}

software-check-pip(){
    msg_notification "checking for python3 pip3"
    for cli in pip3; do
        if ! type "$cli" > /dev/null 2>&1; then
            msg_error "$cli is not installed - attempting to install"
	    apt install python3-pip -y --no-install-recommends

            #curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py
            #sudo python3 get-pip.py
            #rm get-pip.py
        #else
            #msg_notification "checking for latest version of python3 pip3"
            #sudo -H pip3 install --upgrade pip
        #    sudo python3 -m pip install --upgrade pip
        fi
  	done
    msg_good "python3 pip is installed"
}

install-ansible(){
    if ! type "ansible" > /dev/null 2>&1; then
        msg_notification "ansible not installed, enter sudo password to install"
	apt install ansible ansible-lint -y
        #sudo python3 -m pip3 install ansible
    fi
    msg_good "ansible is installed"
}

install-xcode(){
    if ! command -v cc >/dev/null; then
        msg_notification "xcode commandline tools not installed, installing"
        xcode-select --install
    fi
    msg_good "xcode commandline tools installed"
}

install-homebrew(){
    if ! command -v brew >/dev/null; then
        msg_notification "homebrew not installed, installing"
        ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)" </dev/null
    fi
    msg_good "homebrew installed"
}

run-ansible(){
    msg_status "handing off to ansible!"
    cd ansible
    ansible-galaxy install -r requirements.yml
    ansible-playbook main.yml -i inventory
}

install-dotfiles(){
    msg_good "installing dotfiles"
    if [ -d "dotfiles" ]; then
	rm -rf dotfiles
    fi
    git clone https://github.com/philcryer/dotfiles.git
    cd dotfiles/
    if [ ! -f "$HOME/.gitconfig" ]; then
        cp .gifconfig ${HOME}
    fi
    cp -R .gitignore .wgetrc .screenrc .tmux.conf .hushlogin .curlrc .abcde.conf .aliases ${HOME}
    cd ..; rm -rf dotfiles
}

main(){
    kick-off;
    os-check;
    if [ "$distro" == "MacOS" ]; then
      install-xcode;
      install-homebrew;
    fi
    software-check;
    #install-dotfiles;
    software-check-pip;
    install-ansible;
    run-ansible;
}

main;

exit 0
